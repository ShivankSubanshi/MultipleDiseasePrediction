# -*- coding: utf-8 -*-
"""heartDiseasePredic_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v8CODLLOFXDoWe-bBecReqtsNAvLPAnb
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Loading CSV dataset"""

heart_data = pd.read_csv('heart_disease_data.csv')

heart_data.head()

#no of missing values in each row
heart_data.isnull().sum()

#statistical measures of the data
heart_data.describe()

#1 denotes that there is heart disease whereas 0 denotes no heart disease
#equal number of distribution is required
heart_data['target'].value_counts()

#Splitting the features and targets
X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']
print(X)
print(Y)

"""Splitting dataset into training and testing data

"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Logistic Regression"""

model = LogisticRegression()

#training the Logistic Regression Model with training data
model.fit(X_train, Y_train)

"""Accuracy Score(Training Data)

"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("Accuracy on training data : ",training_data_accuracy)

#accuracy on test data
#if there is significant difference between accuracy score of train and test data then the model has overfitted the training data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print("Accuracy score on test data : ",test_data_accuracy)

#creating the model
input_data = (63,1,3,145,233,1,0,150,0,2.3,0,0,1)
#process the data i.e. conv from tuple to numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshape the array otherwise the model will assume that we're predicting for 242 values
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print("Prediction of the input data : ",prediction)

