# -*- coding: utf-8 -*-
"""diabetesPredic_SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vzRoxR68SB5AkEmJFRumV3ACPCIk21Ua

importof dependencies
"""

import numpy as np#np arrays
import pandas as pd #creating dataframes
from sklearn.preprocessing import StandardScaler #standardise the data
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection & Analysis"""

#loading the dataset to a pandas datafile
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing the first 5 rows of the dataset
diabetes_dataset.head()

#number of rows and columns in this dataset
diabetes_dataset.shape

#getting the statistical measure of the data
diabetes_dataset.describe()

diabetes_dataset["Outcome"].value_counts()

"""0 --> non-diabetic
1 --> diabetic
"""

diabetes_dataset.groupby("Outcome").mean()

diabetes_dataset.mean()

#separating the data and the labels
X = diabetes_dataset.drop(columns = "Outcome", axis = 1)
Y = diabetes_dataset["Outcome"]

print(X)

print(Y)

"""Data standardisation

why?: standardise the data in particular range so that it is easy for the ML model to make the prediction
"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset["Outcome"]

print(X)
print(Y)

"""Splitting into train and test"""

#if we don't include startify then there is a chance that all diabetic case go to train and all non diabetic goes to test
X_train , X_test , Y_train , Y_test = train_test_split(X,Y,test_size = 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel='linear')#load the svm into the variable classifier

#training the SVM classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation"""

#Accuracy Score
X_train_accuracy = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_accuracy, Y_train)
print("Training data accuracy : ",training_data_accuracy)

X_test_accuracy = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_accuracy, Y_test)
print("Test data accuracy : ",test_data_accuracy)

"""Making a predictive System"""

input_data = (10,168,74,0,0,38,0.537,34)
#change to numpy arr as processing of np array is easy
input_data_as_numpy_array = np.asarray(input_data)
#reshape the array as we are predicting for one instance
#this reshape will the model that we need prediction only for one datapoint
#we aren;t giving 768 ex but trying to predict the label for only one row
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardisation of the input data
std_data = scaler.transform(input_data_reshaped)
prediction = classifier.predict(std_data)
print(prediction)
if (prediction[0] == 0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")

