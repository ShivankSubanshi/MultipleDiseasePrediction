# -*- coding: utf-8 -*-
"""parkinsonDiseease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UqkO5cfRyJzFqC8czDj1LkgNK8IaS8zF
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

#Loading the data through pd frame
parkinson_data = pd.read_csv('parkinsons.csv')

"""Data frame is a structured table that can load the dataset"""

parkinson_data.head()

"""Data separation and cleaning"""

#number of rows and cols in dataset
parkinson_data.shape

parkinson_data.info()

#in order to check for missing values in each column
parkinson_data.isnull().sum()

#as we don't have the missing values so we can proceed
parkinson_data.describe()

"""1 means parkinson's positive , 0 means not positive"""

parkinson_data["status"].value_counts()

#ignore the non numeric value
parkinson_data.groupby('status').mean(numeric_only=True)

#separating the features and targets i.e. name status
X = parkinson_data.drop(columns=['name','status'],axis=1)
Y = parkinson_data['status']

print(Y)

"""Splittin the data into training and testing"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

scaler = StandardScaler()#loading one instance of standard scaler

scaler.fit(X_train)#transforming all the values to one range
#fitting the data with training dataset

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

"""Model training

SVC : support vector classifier i.e status either 0/1 which is a classification problem
"""

model = svm.SVC(kernel="linear")

#training the SVM model with training data
model.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train,X_train_prediction)

print("Accuracy score of training data : ",training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test,X_test_prediction)

print("Accuracy score of test data : ",test_data_accuracy)

"""Testing of a random sample | PREDICTIVE SYSTEM"""

#person has parkinson since the status has 1
input_data = (153.88000,172.86000,78.12800,0.00480,0.00003,0.00232,0.00267,0.00696,0.04137,0.37000,0.02021,0.02591,0.04525,0.06062,0.01849,19.49300,0.629017,0.698951,-5.186960,0.237622,2.557536,0.259765)

#input data is in the form of tuple therefore we have to change to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardise the input data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print("The person doesn't have parkinson")
else:
  print("The person has parkinson")